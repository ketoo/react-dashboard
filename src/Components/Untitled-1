NFResDailyRetentionBody xResDailyRetentionBody = new NFResDailyRetentionBody();
    
    
        for (int i = 1; i < 15; ++i)
        {
            Calendar beginData = Calendar.getInstance();
            beginData.set(date.get(Calendar.YEAR), date.get(Calendar.MONTH), date.get(Calendar.DAY_OF_MONTH));
            beginData.add(Calendar.DAY_OF_YEAR,-i);
        
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        
            String strDateTime = sdf.format(beginData.getTime());
        
            List<NFDailyRetentionModel> xPlatDataList = dailyRetentionDAO.findByTime(strDateTime);
            List<NFDailyRetentionModel> xDailyDataList = dailyRetentionDAO.findByTimeAndPlat(strDateTime, "0");
        
            for (int j = 0; j < xDailyDataList.size(); ++j)
            {
                NFDailyRetentionModel xData = xDailyDataList.get(j);
                NFPlatRetentionData xPlatUserData = new NFPlatRetentionData();
            
            
                xPlatUserData.setPlat(xData.getPlat());
                xPlatUserData.setTime(xData.getTime());
                xPlatUserData.setTodayNumber(xData.getHitNumber());
                xPlatUserData.setTotalNumber(xData.getOldNumber());
            
                xResDailyRetentionBody.getTotalUserData().add(xPlatUserData);
            }
        
            for (int j = 0; j < xPlatDataList.size(); ++j)
            {
                NFDailyRetentionModel xData = xPlatDataList.get(j);
                List<NFPlatRetentionData> xPlatNewUserDataList;
            
                boolean bContain = xResDailyRetentionBody.getPlatUserData().containsKey(xData.getPlat());
                if (bContain)
                {
                    xPlatNewUserDataList = xResDailyRetentionBody.getPlatUserData().get(xData.getPlat());
                }
                else
                {
                    xPlatNewUserDataList = new ArrayList<>();
                
                    xResDailyRetentionBody.getPlatUserData().put(xData.getPlat(), xPlatNewUserDataList);
                }
            
                NFPlatUserData xPlatUserData = new NFPlatUserData();
            
            
                xPlatUserData.setPlat(xData.getPlat());
                xPlatUserData.setTime(xData.getTime());
                xPlatUserData.setTodayNumber(xData.getHitNumber());
                xPlatUserData.setTotalNumber(xData.getOldNumber());
            
                xPlatNewUserDataList.add(xPlatUserData);
            }
        }
    
        for (int i = 1; i < 15; ++i)
        {
            Calendar beginData = Calendar.getInstance();
            beginData.set(date.get(Calendar.YEAR), date.get(Calendar.MONTH), date.get(Calendar.DAY_OF_MONTH));
            beginData.add(Calendar.DAY_OF_YEAR,-i);
        
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        
            String strDateTime = sdf.format(beginData.getTime());
        
            boolean bTotal = false;
            for (int j = 0; j < xResDailyRetentionBody.getTotalUserData().size(); ++j)
            {
                NFPlatRetentionData xPlatUserData = xResDailyRetentionBody.getTotalUserData().get(j);
                if (xPlatUserData.getTime().equals(strDateTime))
                {
                    bTotal = true;
                    break;
                }
            }
        
            if (!bTotal)
            {
                NFPlatUserData xPlatUserData = new NFPlatUserData();
            
                xPlatUserData.setPlat("0");
                xPlatUserData.setTime(strDateTime);
                xPlatUserData.setTodayNumber(0);
                xPlatUserData.setTotalNumber(0);
            
                xResDailyRetentionBody.getTotalUserData().add(xPlatUserData);
            }
        }
    
        if (xResDailyRetentionBody.getPlatUserData() != null)
        {
            for (Map.Entry<String, List<NFResDailyRetentionBody.NFPlatRetentionData>> entry : xResDailyRetentionBody.getPlatUserData().entrySet())
            {
                for (int i = 1; i < 15; ++i)
                {
                    Calendar beginData = Calendar.getInstance();
                    beginData.set(date.get(Calendar.YEAR), date.get(Calendar.MONTH), date.get(Calendar.DAY_OF_MONTH));
                    beginData.add(Calendar.DAY_OF_YEAR,-i);
                
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                
                    String strDateTime = sdf.format(beginData.getTime());
                
                    boolean bTotal = false;
                    for (int j = 0; j < entry.getValue().size(); ++j)
                    {
                        NFPlatUserData xPlatUserData = entry.getValue().get(j);
                        if (xPlatUserData.getTime().equals(strDateTime))
                        {
                            bTotal = true;
                            break;
                        }
                    }
                
                    if (!bTotal)
                    {
                        NFPlatUserData xPlatUserData = new NFPlatUserData();
                    
                        xPlatUserData.setPlat("0");
                        xPlatUserData.setTime(strDateTime);
                        xPlatUserData.setTodayNumber(0);
                        xPlatUserData.setTotalNumber(0);
                    
                        entry.getValue().add(xPlatUserData);
                    }
                }
            }
        }
    
        xResDailyRetentionBody.getPlatUserData().remove("0");
    
        return xResDailyRetentionBody;